package view;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.SimpleDateFormat;import java.util.List;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.JTextField;import javax.swing.SpringLayout;import javax.swing.WindowConstants;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.table.DefaultTableModel;import entity.Oder;import entity.OderDetail;import entity.Product;import service.OderDetailService;import service.StaticVariable;import service.ProductService;public class OderDetailView extends JFrame implements ActionListener, ListSelectionListener {    private static final long serialVersionUID = 1L;    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");    OderDetailService oderDetailService = new OderDetailService();    private JButton addProductBtn;    private JButton editProductBtn;    private JButton deleteProductBtn;    private JButton clearProductBtn;    private JButton AddProductToOder;    private JButton editOderDetailBtn;    private JButton deleteOderDetailBtn;    private JButton backBtn;    private JScrollPane jScrollPaneProductTable;    private JScrollPane jScrollPaneOderDetailTable;    private JTable ProductTable;    private JTable OderDetailTable;    private JLabel idLabel;    private JLabel ProductLabel;    private JLabel PriceProductLabel;    private JLabel QuantityProductLabel;    private JLabel contentProductLabel;    private JTextField idProductField;    private JTextField ProductField;    private JTextField PriceProductField;    private JTextField QuantityProductField;    private JTextField contentProductField;    private JLabel idOderDetailLabel;    private JLabel quantityOderDetailLabel;    private JLabel titleProductLabel;    private JLabel titleOderDetailLabel;    private JTextField idOderDetailField;    private JTextField quantityOderDetailField;    private String[] columnProduct = new String[]{            "Id", "Name", "Price", "Quantity", "Content", "Date"};    private String[] columnOderDetail = new String[]{            "Id", "Quantity", "Name Product", "Name Customer"};    private Object data = new Object[][]{};    private Object data2 = new Object[][]{};    public OderDetailView() {        initComponents();    }    private void initComponents() {        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        // khởi tạo các phím chức năng        addProductBtn = new JButton("Add");        editProductBtn = new JButton("Edit");        deleteProductBtn = new JButton("Delete");        clearProductBtn = new JButton("Clear");        backBtn = new JButton("Back");        AddProductToOder = new JButton("Thêm Sản Phẩm");        editOderDetailBtn = new JButton("Edit OderDetail");        deleteOderDetailBtn = new JButton("Delete OderDetail");        jScrollPaneProductTable = new JScrollPane();        jScrollPaneOderDetailTable = new JScrollPane();        ProductTable = new JTable();        OderDetailTable = new JTable();        // khởi tạo các label        idLabel = new JLabel("Id");        ProductLabel = new JLabel("Name");        PriceProductLabel = new JLabel("Price");        QuantityProductLabel = new JLabel("Quantity");        contentProductLabel = new JLabel("Content");        idOderDetailLabel = new JLabel("Id");        quantityOderDetailLabel = new JLabel("Quantity");        titleProductLabel = new JLabel("Danh Sách Bệnh Của ");        titleOderDetailLabel = new JLabel("Sản Phẩm Đã Mua");        Font font = new Font("Arial", Font.BOLD, 24);        titleProductLabel.setFont(font);        titleOderDetailLabel.setFont(font);        idProductField = new JTextField(15);        idProductField.setEditable(false);        ProductField = new JTextField(15);        PriceProductField = new JTextField(15);        QuantityProductField = new JTextField(15);        idOderDetailField = new JTextField(15);        idOderDetailField.setEditable(false);        quantityOderDetailField = new JTextField(15);        contentProductField = new JTextField(15);        // cài đặt các cột và data cho bảng Product        ProductTable.setModel(new DefaultTableModel((Object[][]) data, columnProduct));        OderDetailTable.setModel(new DefaultTableModel((Object[][]) data2, columnOderDetail));        jScrollPaneProductTable.setViewportView(ProductTable);        jScrollPaneOderDetailTable.setViewportView(OderDetailTable);        jScrollPaneProductTable.setPreferredSize(new Dimension(550, 200));        jScrollPaneOderDetailTable.setPreferredSize(new Dimension(550, 200));        // tạo spring layout        SpringLayout layout = new SpringLayout();        // tạo đối tượng panel để chứa các thành phần của màn hình quản lý Product        JPanel panel = new JPanel();        panel.setSize(1100, 1000);        panel.setLayout(layout);        panel.add(jScrollPaneProductTable);        panel.add(jScrollPaneOderDetailTable);        panel.add(addProductBtn);        panel.add(editProductBtn);        panel.add(deleteProductBtn);        panel.add(clearProductBtn);        panel.add(AddProductToOder);        panel.add(editOderDetailBtn);        panel.add(deleteOderDetailBtn);        panel.add(backBtn);        panel.add(titleOderDetailLabel);        panel.add(idLabel);        panel.add(ProductLabel);        panel.add(QuantityProductLabel);        panel.add(contentProductLabel);        panel.add(PriceProductLabel);        panel.add(quantityOderDetailLabel);        panel.add(idOderDetailLabel);        panel.add(titleProductLabel);        panel.add(idProductField);        panel.add(ProductField);        panel.add(QuantityProductField);        panel.add(PriceProductField);        panel.add(QuantityProductField);        panel.add(idOderDetailField);        panel.add(quantityOderDetailField);        panel.add(contentProductField);        // cài đặt vị trí các thành phần trên màn hình login        layout.putConstraint(SpringLayout.WEST, idLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idLabel, 60, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, ProductLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, ProductLabel, 90, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, PriceProductLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, PriceProductLabel, 120, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, QuantityProductLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, QuantityProductLabel, 150, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, contentProductLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, contentProductLabel, 180, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, idOderDetailLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idOderDetailLabel, 340, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, quantityOderDetailLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, quantityOderDetailLabel, 370, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, titleOderDetailLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, titleOderDetailLabel, 300, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, titleProductLabel, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, titleProductLabel, 10, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, backBtn, 790, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, backBtn, 25, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, idProductField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idProductField, 60, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, ProductField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, ProductField, 90, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, QuantityProductField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, QuantityProductField, 120, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, contentProductField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, contentProductField, 150, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, PriceProductField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, PriceProductField, 180, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, idOderDetailField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, idOderDetailField, 340, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, quantityOderDetailField, 100, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, quantityOderDetailField, 370, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, jScrollPaneProductTable, 300, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, jScrollPaneProductTable, 60, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, jScrollPaneOderDetailTable, 350, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, jScrollPaneOderDetailTable, 345, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, addProductBtn, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, addProductBtn, 220, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, editProductBtn, 70, SpringLayout.WEST, addProductBtn);        layout.putConstraint(SpringLayout.NORTH, editProductBtn, 220, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, deleteProductBtn, 70, SpringLayout.WEST, editProductBtn);        layout.putConstraint(SpringLayout.NORTH, deleteProductBtn, 220, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.NORTH, clearProductBtn, 220, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, clearProductBtn, 75, SpringLayout.WEST, deleteProductBtn);        layout.putConstraint(SpringLayout.WEST, editOderDetailBtn, 150, SpringLayout.WEST, deleteOderDetailBtn);        layout.putConstraint(SpringLayout.NORTH, editOderDetailBtn, 400, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, deleteOderDetailBtn, 10, SpringLayout.WEST, panel);        layout.putConstraint(SpringLayout.NORTH, deleteOderDetailBtn, 400, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.NORTH, AddProductToOder, 250, SpringLayout.NORTH, panel);        layout.putConstraint(SpringLayout.WEST, AddProductToOder, 60, SpringLayout.WEST, panel);        this.add(panel);        this.pack();        this.setTitle("Product Information");        this.setSize(950, 630);        // disable Edit and Delete buttons        editProductBtn.setEnabled(false);        deleteProductBtn.setEnabled(false);        addProductBtn.setEnabled(true);        editProductBtn.setEnabled(false);        deleteProductBtn.setEnabled(false);        addProductBtn.setEnabled(true);        setLocationRelativeTo(null);    }    public void showNameCustomer() {        titleProductLabel.setText("Thêm Sản Phẩm Cho Khách : " + StaticVariable.customer.getName());    }    public void showMessage(String message) {        JOptionPane.showMessageDialog(this, message);    }    /**     * hiển thị list Product vào bảng ProductTable     *     * @param list     */    public void showListProducts(List<Product> list) {        showNameCustomer();        int size = list.size();        Object[][] Products = new Object[size][6];        for (int i = 0; i < size; i++) {            Products[i][0] = list.get(i).getId();            Products[i][1] = list.get(i).getName();            Products[i][2] = list.get(i).getPrice();            Products[i][3] = list.get(i).getQuantity();            Products[i][4] = list.get(i).getContent();            Products[i][5] = formatter.format(list.get(i).getDate());        }        ProductTable.setModel(new DefaultTableModel(Products, columnProduct));    }    public void clearProductInfo() {        idProductField.setText("");        ProductField.setText("");        PriceProductField.setText("");        QuantityProductField.setText("");        contentProductField.setText("");        editProductBtn.setEnabled(false);        deleteProductBtn.setEnabled(false);        addProductBtn.setEnabled(true);    }    public void clearOderDetailInfo() {        idOderDetailField.setText("");        quantityOderDetailField.setText("");        editOderDetailBtn.setEnabled(false);        deleteOderDetailBtn.setEnabled(false);    }    public Product getProductInfo() {        try {            String name = ProductField.getText();            int price = Integer.parseInt(PriceProductField.getText());            int id = Integer.parseInt(idProductField.getText());            int quantity = Integer.parseInt(QuantityProductField.getText());            String content = contentProductField.getText();            return new Product(id, name, content, price, quantity);        } catch (Exception e) {            return new Product();        }    }    public OderDetail getOderDetailEdit() {        try {            int id = Integer.parseInt(idOderDetailField.getText());            int quantity = Integer.parseInt(quantityOderDetailField.getText());            OderDetail oderDetail = oderDetailService.getOderDetailById(id);            oderDetail.setQuantity(quantity);            return oderDetail;        } catch (Exception e) {            return new OderDetail();        }    }    public OderDetail getOderDetailAdd() {        try {            int idP = Integer.parseInt(idProductField.getText());            int quantity = 1;            Product product = new Product();            product.setId(idP);            Oder oder = new Oder();            oder.setId(StaticVariable.oderId);            return new OderDetail(quantity, product, oder);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    public void fillProductFromSelectedRow() {        ProductService ProductFunc = new ProductService();        // lấy chỉ số của hàng được chọn        int row = ProductTable.getSelectedRow();        if (row >= 0) {            idProductField.setText(ProductTable.getModel().getValueAt(row, 0).toString());            ProductField.setText(ProductTable.getModel().getValueAt(row, 1).toString());            PriceProductField.setText(ProductTable.getModel().getValueAt(row, 2).toString());            QuantityProductField.setText(ProductTable.getModel().getValueAt(row, 3).toString());            contentProductField.setText(ProductTable.getModel().getValueAt(row, 4).toString());            editProductBtn.setEnabled(true);            deleteProductBtn.setEnabled(true);            addProductBtn.setEnabled(false);//            showListOderDetail(OderDetails);            clearOderDetailInfo();        }    }    public void fillOderDetailFromSelectedRow() {        int row = OderDetailTable.getSelectedRow();        if (row >= 0) {            idOderDetailField.setText(OderDetailTable.getModel().getValueAt(row, 0).toString());            quantityOderDetailField.setText(OderDetailTable.getModel().getValueAt(row, 1).toString());            editOderDetailBtn.setEnabled(true);            deleteOderDetailBtn.setEnabled(true);        }    }    public void showListOderDetail(List<OderDetail> list) {        int size = list.size();        Object[][] OderDetail = new Object[size][4];        for (int i = 0; i < size; i++) {            OderDetail[i][0] = list.get(i).getId();            OderDetail[i][1] = list.get(i).getQuantity();            OderDetail[i][2] = list.get(i).getProduct().getName();            OderDetail[i][3] = list.get(i).getOder().getCustomer().getName();        }        OderDetailTable.setModel(new DefaultTableModel(OderDetail, columnOderDetail));    }    public void actionPerformed(ActionEvent e) {    }    public void valueChanged(ListSelectionEvent e) {    }    public void addAddProductListener(ActionListener listener) {        addProductBtn.addActionListener(listener);    }    public void addEditProductListener(ActionListener listener) {        editProductBtn.addActionListener(listener);    }    public void addDeleteProductListener(ActionListener listener) {        deleteProductBtn.addActionListener(listener);    }    public void addClearProductListener(ActionListener listener) {        clearProductBtn.addActionListener(listener);    }    public void backProductListener(ActionListener listener) {        backBtn.addActionListener(listener);        clearOderDetailInfo();    }    public void addProductToOderListener(ActionListener listener) {        AddProductToOder.addActionListener(listener);    }    public void editOderDetailListener(ActionListener listener) {        editOderDetailBtn.addActionListener(listener);    }    public void deleteOderDetailListener(ActionListener listener) {        deleteOderDetailBtn.addActionListener(listener);    }    public void addListProductSelectionListener(ListSelectionListener listener) {        ProductTable.getSelectionModel().addListSelectionListener(listener);    }    public void addListOderDetailSelectionListener(ListSelectionListener listener) {        OderDetailTable.getSelectionModel().addListSelectionListener(listener);    }}